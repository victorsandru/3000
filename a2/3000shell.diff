*** 3000shell.c	2023-11-05 13:55:32.392000000 -0500
--- 3000shellMod.c	2023-11-05 13:01:16.332000000 -0500
***************
*** 21,26 ****
--- 21,27 ----
  #include <ctype.h>
  #include <fcntl.h>
  #include <signal.h>
+ #include <time.h>
  
  #define BUFFER_SIZE 1<<16
  #define ARR_SIZE 1<<16
***************
*** 191,196 ****
--- 192,202 ----
  {
          int pid, status;
  
+         if (the_signal == SIGUSR1) {
+             fprintf(stderr, "Ouch!\n");
+             return;
+         }
+         
          if (the_signal == SIGHUP) {
                  fprintf(stderr, "Received SIGHUP.\n");
                  return;
***************
*** 218,224 ****
  }
  
  void run_program(char *args[], int background, char *stdout_fn,
!                  char *path, char *envp[])
  {
          pid_t pid;
          int fd, *ret_status = NULL;
--- 224,230 ----
  }
  
  void run_program(char *args[], int background, char *stdout_fn,
!                  char *path, char *envp[], int output)
  {
          pid_t pid;
          int fd, *ret_status = NULL;
***************
*** 237,243 ****
                  find_binary(args[0], path, bin_fn, BUFFER_SIZE);
  
                  if (stdout_fn != NULL) {
!                         fd = creat(stdout_fn, 0666);
                          dup2(fd, 1);
                          close(fd);
                  }
--- 243,254 ----
                  find_binary(args[0], path, bin_fn, BUFFER_SIZE);
  
                  if (stdout_fn != NULL) {
!                         if (output) {
!                                 fd = open(stdout_fn, O_CREAT|O_APPEND|O_RDWR, 0666);
!                         } else {
!                                 fd = creat(stdout_fn, 0666);
!                         }
!                         
                          dup2(fd, 1);
                          close(fd);
                  }
***************
*** 246,251 ****
--- 257,266 ----
                          puts(strerror(errno));
                          exit(127);
                  }
+                 // if(execv(bin_fn, args)) {
+                 //         puts(strerror(errno));
+                 //         exit(127);
+                 // }
          }
  }
  
***************
*** 259,267 ****
          char *s;
          int i, j;
          char *stdout_fn;
          
          while(1){
!                 printf("%s $ ", username);
                  s = fgets(buffer, BUFFER_SIZE, stdin);
                  
                  if (s == NULL) {
--- 274,288 ----
          char *s;
          int i, j;
          char *stdout_fn;
+         char *myPrompt = getenv("MYPROMPT");
+         if (!myPrompt) {
+                 myPrompt = "$";
+         }
          
          while(1){
!                 time_t currentTime = time(NULL);
!                 struct tm *localTime = localtime(&currentTime);
!                 printf("%s (%02d:%02d:%02d) %s ", username, localTime->tm_hour, localTime->tm_min, localTime->tm_sec, myPrompt);
                  s = fgets(buffer, BUFFER_SIZE, stdin);
                  
                  if (s == NULL) {
***************
*** 274,279 ****
--- 295,305 ----
                  
                  if (nargs==0) continue;
                  
+                 if(!strcmp(args[0], "unset")) {
+                         unsetenv(args[1]);
+                         continue;
+                 }
+ 
                  if (!strcmp(args[0], "exit")) {
                          exit(0);
                  }
***************
*** 289,299 ****
                          nargs--;
                          args[nargs] = NULL;
                  }
! 
                  stdout_fn = NULL;
                  for (i = 1; i < nargs; i++) {
                          if (args[i][0] == '>') {
                                  stdout_fn = args[i];
                                  stdout_fn++;
                                  printf("Set stdout to %s\n", stdout_fn);
                                  for (j = i; j < nargs - 1; j++) {
--- 315,330 ----
                          nargs--;
                          args[nargs] = NULL;
                  }
!                 
!                 int output = 0;
                  stdout_fn = NULL;
                  for (i = 1; i < nargs; i++) {
                          if (args[i][0] == '>') {
                                  stdout_fn = args[i];
+                                 if (args[i][1] == '>') {
+                                         stdout_fn++;
+                                         output = 1;
+                                 }
                                  stdout_fn++;
                                  printf("Set stdout to %s\n", stdout_fn);
                                  for (j = i; j < nargs - 1; j++) {
***************
*** 305,311 ****
                          }
                  }
                  
!                 run_program(args, background, stdout_fn, path, envp);
          }    
  }
  
--- 336,342 ----
                          }
                  }
                  
!                 run_program(args, background, stdout_fn, path, envp, output);
          }    
  }
  
***************
*** 337,340 ****
          prompt_loop(username, path, envp);
          
          return 0;
! }
--- 368,371 ----
          prompt_loop(username, path, envp);
          
          return 0;
! }
\ No newline at end of file
